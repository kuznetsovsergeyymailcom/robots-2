{"version":3,"sources":["Card.js","cardList.js","robots.js","searchbox.js","scrollArea.js","ErrorBoundry.js","App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","cardComponent","map","user","index","key","username","searchbox","searchfield","searchChange","type","placeholder","onChange","scrollArea","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","this","Component","App","onSearchChange","event","setState","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.41dba4ef.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({id,name,email})=> {\r\n    \r\nreturn (\r\n    <div className=\"bg-light-green dib br3 pa3 ma3 ma3 grow bw2 shadow-5\">\r\n        <img src={`https://robohash.org/${id}?100x100`} alt=\"robot\"/>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n    </div>\r\n\r\n);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    // if(true){\r\n    //     return new Error(\"Hooo error!!\");\r\n    // }\r\n\r\n    const cardComponent = robots.map((user, index)=>{\r\n        return <Card key={index} id={robots[index].id} name={robots[index].name} email={robots[index].email}/>;            \r\n    });\r\n\r\n    return (\r\n        <div>{cardComponent}</div>\r\n    );\r\n}\r\n\r\nexport default CardList;","export const robots = [\r\n    {\r\n      id: 1,\r\n      name: 'Leanne Graham',\r\n      username: 'Bret',\r\n      email: 'Sincere@april.biz'\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Ervin Howell',\r\n      username: 'Antonette',\r\n      email: 'Shanna@melissa.tv'\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Clementine Bauch',\r\n      username: 'Samantha',\r\n      email: 'Nathan@yesenia.net'\r\n    },\r\n    {\r\n      id: 4,\r\n      name: 'Patricia Lebsack',\r\n      username: 'Karianne',\r\n      email: 'Julianne.OConner@kory.org'\r\n    },\r\n    {\r\n      id: 5,\r\n      name: 'Chelsey Dietrich',\r\n      username: 'Kamren',\r\n      email: 'Lucio_Hettinger@annie.ca'\r\n    },\r\n    {\r\n      id: 6,\r\n      name: 'Mrs. Dennis Schulist',\r\n      username: 'Leopoldo_Corkery',\r\n      email: 'Karley_Dach@jasper.info'\r\n    },\r\n    {\r\n      id: 7,\r\n      name: 'Kurtis Weissnat',\r\n      username: 'Elwyn.Skiles',\r\n      email: 'Telly.Hoeger@billy.biz'\r\n    },\r\n    {\r\n      id: 8,\r\n      name: 'Nicholas Runolfsdottir V',\r\n      username: 'Maxime_Nienow',\r\n      email: 'Sherwood@rosamond.me'\r\n    },\r\n    {\r\n      id: 9,\r\n      name: 'Glenna Reichert',\r\n      username: 'Delphine',\r\n      email: 'Chaim_McDermott@dana.io'\r\n    },\r\n    {\r\n      id: 10,\r\n      name: 'Clementina DuBuque',\r\n      username: 'Moriah.Stanton',\r\n      email: 'Rey.Padberg@karina.biz'\r\n    }\r\n  ];\r\n  ","import React from 'react';\r\n\r\nconst searchbox = ({searchfield, searchChange})=>{\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input type=\"search\" \r\n            placeholder=\"robot name\" \r\n            onChange={searchChange}/>\r\n        </div>\r\n        \r\n    );\r\n}\r\nexport default searchbox;","import React from 'react';\r\n\r\nconst scrollArea = (props)=>{\r\n\r\n    return (\r\n\r\n        <div style={{overflow:'scroll', border: '5px solid black', height: '800px'}}>\r\n            {props.children};\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default scrollArea;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError) {\r\n            return <h1>Oooops thats not good </h1>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {Component} from 'react';\nimport CardList from './cardList';\nimport {robots} from './robots';\nimport SearchBox from './searchbox.js';\nimport ScrollArea from './scrollArea';\nimport ErrorBoundary from './ErrorBoundry';\n\nclass App extends Component {\n\n  constructor(){\n    super();\n\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n  }\n\nonSearchChange = (event)=>{\n  this.setState({searchfield: event.target.value});\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then(users => this.setState({robots: users}));\n}\n\n\ncomponentDidMount(){\n  this.setState({robots: robots});\n}\n\n  render(){\n    const filteredRobots = this.state.robots.filter(robot => {\n      return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n    });\n\n    if(this.state.robots.length === 0){\n      return <h1>Loading</h1>\n    } else {\n      return (\n        <div className=\"tc\">\n          <h2>Robots collection</h2>\n          <SearchBox searchChange={this.onSearchChange}/>\n          <ScrollArea>\n            <ErrorBoundary>\n                  <CardList robots={filteredRobots}/>\n            </ErrorBoundary>\n            \n          </ScrollArea>\n        </div>\n        \n      );\n    }\n    \n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n// import Card from './Card';\nimport {robots} from './robots';\nimport CardList from './cardList';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}